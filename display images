import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array, array_to_img

# Directories and parameters
dataset_dir = 'path'

# ImageDataGenerator for data augmentation and preprocessing
datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,  # Split the data into training and validation
    horizontal_flip=True,
    vertical_flip=True,
    rotation_range=20,
    zoom_range=0.2
)

# Training and validation generators (for sampling)
sample_generator = datagen.flow_from_directory(
    dataset_dir,
    target_size=(224, 224),
    batch_size=1,
    class_mode=None,  # No labels needed, just images
    shuffle=True,
    subset='training'
)

# Function to display original and preprocessed image side by side
def display_original_vs_preprocessed_images(datagen, generator, num_samples=5):
    plt.figure(figsize=(15, num_samples * 5))

    for i in range(num_samples):
        # Generate a random image from the generator
        image = next(generator)
        if image.ndim == 4:
            image = image[0]
        original_image = array_to_img(image)

        # Apply preprocessing
        preprocessed_image = datagen.random_transform(image)
        preprocessed_image = array_to_img(preprocessed_image)

        # Plot original image
        plt.subplot(num_samples, 2, 2 * i + 1)
        plt.imshow(original_image)
        plt.title(f'Original Image {i + 1}')
        plt.axis('off')

        # Plot preprocessed image
        plt.subplot(num_samples, 2, 2 * i + 2)
        plt.imshow(preprocessed_image)
        plt.title(f'Preprocessed Image {i + 1}')
        plt.axis('off')

    plt.tight_layout()
    plt.show()

# Call the display function
display_original_vs_preprocessed_images(datagen, sample_generator, num_samples=5)
